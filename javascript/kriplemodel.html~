<!doctype html>
<html>
<head>
  <title>Network | Basic usage</title>

  <script type="text/javascript" src="vis.js"></script>
  <link href="vis.css" rel="stylesheet" type="text/css" />
  <script type="text/javascript">
      var variable = <?php echo $_POST['my_post'] ?>;
      console.log(variable)
  </script>
  <style type="text/css">
    #mynetwork {
      width: 800px;
      height: 400px;
      border: 1px solid lightgray;
    }
  </style>
</head>
<body>
<div id="mynetwork"></div>


<select id="dropdown">
  <option value="34">3 players with 4 cards</option>
  <option value="35">3 players with 5 cards</option>
  <option value="36">3 players with 6 cards</option>
  <option value="45">4 players wtih 5 cards</option>
</select>


<button type = "button" id="graph" onclick=createGraph()>Create graph</button>
<button type ="button" id="draw_card" onclick=getCard()>Draw cards</button>
<button type ="button" id="person1" onclick=viewPerson(1)>Person 1</button>
<button type ="button" id="person2" onclick=viewPerson(2)>Person 2</button>
<button type ="button" id="person3" onclick=viewPerson(3)>Person 3</button>
<button type= "button" id="person4" onclick=viewPerson(4)>Person 4</button>
<div id="printableArea">
</div>
<script type="text/javascript">

  /* global variables */
  card_value = 0;
  player_value = 0;
  card_array = [];
  color_array =['red', 'green', 'blue', 'orange', 'yellow']

  /* run this at the start to disable the button that are not yet needed */
  disableButton();

  /*Create the graph*/
  function createGraph(){
    var options = document.getElementById("dropdown");
    var dropdown_value = options.options[options.selectedIndex].value;
    /* get the second value of the drop down menu */
    card_value = parseInt(dropdown_value[1]);
    /* get the first value of the drop down menu */
    player_value = parseInt(dropdown_value[0]);
    document.getElementById("printableArea").innerHTML = "";
    disableButton()
    /*Make the graph with a array with all the number in an array */
    makeGraph(range1(card_value))
  }

  /* Disable the person buttons and enable the draw card button */
  function disableButton(){
    document.getElementById("draw_card").disabled =false;
    document.getElementById("person1").disabled = true;
    document.getElementById("person2").disabled = true;
    document.getElementById("person3").disabled = true;
    document.getElementById("person4").disabled = true;
  }

  /* Enable the person buttons */
  function enableButton(){
    document.getElementById("person1").disabled = false;
    document.getElementById("person2").disabled = false;
    document.getElementById("person3").disabled = false;
    if(player_value==4){
      document.getElementById("person4").disabled = false;
    }
  }


  /* Function to set the text to the html */
  function setTextToArea(text){
    document.getElementById("printableArea").innerHTML += text;
  }

  /* The possible cases for a person when a card is draw */
  function possibleCases(person_number){
    var array = [];

    for(var i=2; i<card_value+2;i++){
      var temp_card_array = card_array.slice();
      temp_card_array[person_number-1] = i;
      var string = "";

      for(var j=0;j<player_value;j++) {
        string = string + temp_card_array[j];
      }

      array.push(string);
    }
    return array;
  }

  /* Make the graph for only one person, where number is the number of the person */
  /* TODO:Found out that there is a little error in the model, because now also 334 is modelled
  for one person but that can't be because he already sees an 3 and there only can be one 3 in the model,
  so this need to be fixed that it can only sees for example guess 234 or 534 or 634 etc.
  function viewPerson(number){
    /* Get all possible cases for a single person */
    var result = possibleCases(number);
    /* Get the nodes and set them to an array */
    var nodes_array = setNodes(result);
    /*Make the nodes as a vis dataset */
    var nodes = new vis.DataSet(nodes_array);
    /*Get the edge array for the possible cases for one person */
    var edges_array =  setEdges(result)
    /*Make the edges as a vis dataset */
    var edges = new vis.DataSet(edges_array);

    /*Create the network  and set it to the html*/
    var container = document.getElementById('mynetwork');
    var data = {
      nodes: nodes,
      edges: edges
    };
    var options = {};
    var network = new vis.Network(container, data, options);
  }

  /*Randomly draw a card for all players and set them to the html */
  function getCard() {
    card_array =[]
    var counter = 0;
    while (counter != player_value) {
      var random_number = Math.floor(Math.random() * card_value) + 2;
      if (!(contains.call(card_array, random_number))) {
        counter = counter + 1;
        card_array.push(random_number);
      }
    }
    enableButton();
    for(var i=1;i<card_array.length+1;i++){
      setTextToArea("<p> Person " + i + " draw card " + card_array[i-1] + "</p>");
    }
  }


  /*Generate recursive all possible cases for all cards and person */
  /*TODO: I think this is the bottleneck why the program is slow */
  function allPossibleCases(arr) {
    if (arr.length == 1) {
      return arr[0];
    } else {
      var result = [];
      var allCasesOfRest = allPossibleCases(arr.slice(1));  // recur with the rest of array
      for (var i = 0; i < allCasesOfRest.length; i++) {
        for (var j = 0; j < arr[0].length; j++) {
          for (var k = 0; k < allCasesOfRest.length; k++) {
            /*Check if a symbol is already in the array*/
	    if (arr[0][j] == allCasesOfRest[i][k]) {
              break;
            }
            /*If it is a new symbol then put it in the array */
            if (k == allCasesOfRest.length - 1 && arr[0][j] != allCasesOfRest[i]) {
              result.push(allCasesOfRest[i].toString() + arr[0][j].toString());
            }
          }
        }
      }
    }
     /*Result should be an array with all different card value like: [5,4,3] for 3 person and 4 card value*/
      return result;

  }

  /*Make an array for all number until the variable number, but starts from 2*/
  function range1(number){
    var array_number =[];
    for (var i=2;i<number+2;i++){
      array_number.push(i)
    }
    return array_number;
  }

  /*TODO: Found this fuction on internet, but maybe there is a faster way for doing this,
  until now it serves for my ideas */
  /*It search if a character is in the string already so for example if 'a' is in 'abc' */
  var contains = function(needle) {
    // Per spec, the way to identify NaN is that it is not equal to itself
    var findNaN = needle !== needle;
    var indexOf;

    if(!findNaN && typeof Array.prototype.indexOf === 'function') {
      indexOf = Array.prototype.indexOf;
    } else {
      indexOf = function(needle) {
        var i = -1, index = -1;

        for(i = 0; i < this.length; i++) {
          var item = this[i];

          if((findNaN && item !== item) || item === needle) {
            index = i;
            break;
          }
        }

        return index;
      };
    }

    return indexOf.call(this, needle) > -1;
  };

  /*Set the nodes to an array that is in the form of the node for the vis dataset*/
  function setNodes(result){
    var nodes_array = [];
    for (var i = 0; i < result.length; i++) {
      nodes_array.push({id: i, label: result[i]})
    }
    return nodes_array
  }

  /*Set the edges to an array, that is in the form of the edge for the vis dataset, it will only set an edge
  when there are two character are equal so for example it will set an edge between 234 and 334*/
  function setEdges(result){
    var edges_array = [];
    for (var i = 0; i < result.length; i++) {
      for (var j = 0; j < result.length; j++) {
        var counter = 0;
        var index = 0;
        if (i != j) {
          for (var k = 0; k < player_value; k++) {
            if (result[i][k] != result[j][k]) {
              counter = counter + 1;
              index = k
            }
            if (counter == 1 && k == player_value - 1) {
              edges_array.push({from: i, to: j, arrows: 'to', label: 'R' + (index+1), color: color_array[index]});
            }
          }
        }
      }
    }
    return edges_array
  }
  /*Make the big graph, where are all possibles cases can be modelled */
  function makeGraph(range_array){

      var array = [];
      for (var i = 0; i < player_value; i++) {
        array[i] = range_array;
      }
      var result = allPossibleCases(array);

      var nodes_array = setNodes(result);
      var nodes = new vis.DataSet(nodes_array);

      // create an array with edges
      var edges_array =  setEdges(result)

      var edges = new vis.DataSet(edges_array);
      // create a network
      var container = document.getElementById('mynetwork');
      var data = {
        nodes: nodes,
        edges: edges
      };
      var options = {};
      var network = new vis.Network(container, data, options);
  }
</script>
</body>
</html>
